extends layout

block content
  // P√°gina de entrada
  .login-screen#loginScreen
    .login-container
      .window-title ‚ò¢Ô∏è SALA DE CHAT LIYODEV ‚ò¢Ô∏è
      .login-form
        h2.neon-text ¬°BIENVENIDO A LA SALA!
        .input-group
          label(for="usernameInput") INTRODUCE TU NICK:
          input#usernameInput(type="text" maxlength="15" placeholder="Tu_Nick_Aqui")
        .button-group
          button#enterButton.retro-button ENTRAR A LA SALA
      .retro-info
        p.scroll-text üíÄ CHAT LIYODEV 1995 STYLE üíÄ CONECTANDO USUARIOS DESDE LA ERA DORADA DE INTERNET üíÄ

  // Interfaz principal del chat (oculta inicialmente)
  .main-interface#mainInterface(style="display: none;")
    .window-title
      span.title-text üí¨ SALA DE CHAT LIYODEV - CONECTADO COMO: 
      span#currentUser
      button#exitButton.exit-button ‚úñ SALIR
    
    .chat-layout
      // Panel izquierdo - Chat principal
      .chat-panel
        .messages-container
          .messages-header
            span üì° MENSAJES EN VIVO
            span#messageCount (0)
          #messages.messages
        
        .input-container
          .chat-input
            input#messageInput(type="text" placeholder="Escribe tu mensaje..." maxlength="200")
            button#sendButton ENVIAR
      
      // Panel derecho - Lista de usuarios y info
      .sidebar
        .users-container
          .users-header üë• USUARIOS CONECTADOS
          #usersList.users-list
        
        .info-container
          .info-header üìä ESTAD√çSTICAS
          .stats
            .stat-item
              span.stat-label Usuarios:
              span#userCount.stat-value 0
            .stat-item
              span.stat-label Mensajes:
              span#msgCount.stat-value 0
            .stat-item
              span.stat-label Uptime:
              span#uptime.stat-value 00:00

  script(src="/socket.io/socket.io.js") 
  script.
    let currentUsername = '';
    let messageCount = 0;
    let startTime = new Date();
    let connectedUsers = new Set();
    
    const socket = io();
    
    // Elementos DOM
    const loginScreen = document.getElementById('loginScreen');
    const mainInterface = document.getElementById('mainInterface');
    const usernameInput = document.getElementById('usernameInput');
    const enterButton = document.getElementById('enterButton');
    const exitButton = document.getElementById('exitButton');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const messages = document.getElementById('messages');
    const currentUserSpan = document.getElementById('currentUser');
    const usersList = document.getElementById('usersList');
    const userCount = document.getElementById('userCount');
    const msgCount = document.getElementById('msgCount');
    const messageCountSpan = document.getElementById('messageCount');
    
    // Funci√≥n para entrar al chat
    function enterChat() {
      const username = usernameInput.value.trim();
      if (username && username.length >= 2) {
        currentUsername = username;
        currentUserSpan.textContent = username;
        loginScreen.style.display = 'none';
        mainInterface.style.display = 'block';
        messageInput.focus();
        
        // Enviar evento de conexi√≥n con nombre
        socket.emit('user_join', { usuario: username });
        
        // A√±adir el usuario actual a la lista inmediatamente
        connectedUsers.add(username);
        updateUsersList(Array.from(connectedUsers));
        
        updateUptime();
        setInterval(updateUptime, 1000);
      } else {
        alert('El nombre debe tener al menos 2 caracteres');
      }
    }
    
    // Funci√≥n para enviar mensaje
    function sendMessage() {
      const message = messageInput.value.trim();
      if (message && currentUsername) {
        socket.emit('mensaje_chat', {
          usuario: currentUsername,
          mensaje: message
        });
        messageInput.value = '';
      }
    }
    
    // Funci√≥n para a√±adir mensaje al chat
    function addMessage(data, isSystem = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = isSystem ? 'message system' : 
                             (data.usuario === currentUsername ? 'message sent' : 'message received');
      
      const timestamp = new Date().toLocaleTimeString('es-ES', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit' 
      });
      
      if (isSystem) {
        messageDiv.innerHTML = `<span class="timestamp">[${timestamp}]</span> *** ${data.mensaje} ***`;
      } else {
        messageDiv.innerHTML = `<span class="timestamp">[${timestamp}]</span> <span class="username">&lt;${data.usuario}&gt;</span> ${data.mensaje}`;
      }
      
      messages.appendChild(messageDiv);
      messages.scrollTop = messages.scrollHeight;
      
      messageCount++;
      msgCount.textContent = messageCount;
      messageCountSpan.textContent = messageCount;
    }
    
    // Funci√≥n para actualizar lista de usuarios
    function updateUsersList(users) {
      usersList.innerHTML = '';
      connectedUsers.clear();
      
      // Asegurar que el usuario actual est√© en la lista
      if (currentUsername && !users.includes(currentUsername)) {
        users.unshift(currentUsername);
      }
      
      users.forEach(user => {
        connectedUsers.add(user);
        const userDiv = document.createElement('div');
        userDiv.className = 'user-item';
        // Destacar el usuario actual
        if (user === currentUsername) {
          userDiv.innerHTML = `<span class="user-status">‚óè</span> ${user} <span style="color: #FFFF00;">(t√∫)</span>`;
        } else {
          userDiv.innerHTML = `<span class="user-status">‚óè</span> ${user}`;
        }
        usersList.appendChild(userDiv);
      });
      
      userCount.textContent = users.length;
    }
    
    // Funci√≥n para salir del chat
    function exitChat() {
      if (confirm('¬øEst√°s seguro de que quieres salir de la sala?')) {
        // Desconectar del socket
        socket.disconnect();
        
        // Limpiar datos
        currentUsername = '';
        messageCount = 0;
        connectedUsers.clear();
        messages.innerHTML = '';
        usernameInput.value = '';
        
        // Volver a la pantalla de entrada
        mainInterface.style.display = 'none';
        loginScreen.style.display = 'flex';
        usernameInput.focus();
        
        // Reconectar socket para futuras conexiones
        setTimeout(() => {
          socket.connect();
        }, 500);
      }
    }
    
    // Funci√≥n para actualizar uptime
    function updateUptime() {
      const now = new Date();
      const diff = Math.floor((now - startTime) / 1000);
      const minutes = Math.floor(diff / 60);
      const seconds = diff % 60;
      document.getElementById('uptime').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Event listeners
    enterButton.addEventListener('click', enterChat);
    exitButton.addEventListener('click', exitChat);
    sendButton.addEventListener('click', sendMessage);
    
    usernameInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') enterChat();
    });
    
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') sendMessage();
    });
    
    // Socket events
    socket.on('mensaje_chat', (data) => {
      if (data.usuario === 'INFO') {
        addMessage(data, true);
      } else {
        addMessage(data);
      }
    });
    
    socket.on('num_clientes', (count) => {
      userCount.textContent = count;
    });
    
    socket.on('users_list', (users) => {
      updateUsersList(users);
    });